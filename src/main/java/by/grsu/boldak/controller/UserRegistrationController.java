package by.grsu.boldak.controller;

import by.grsu.boldak.dto.UserRegistrationDto;
import by.grsu.boldak.model.User;
import by.grsu.boldak.repository.FacultyRepository;
import by.grsu.boldak.service.UserService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.validation.Valid;

/**
 * `/registration` page controller
 */
@Controller
@RequestMapping("/registration")
public class UserRegistrationController {
	private static final Logger logger = Logger.getLogger(UserRegistrationController.class);

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private FacultyRepository facultyRepository;

	@Autowired
	private UserService userService;

	/**
	 * Create model for form on page. Model was named as `user`
	 *
	 * @return new Model object
	 */
	@ModelAttribute("user")
	public UserRegistrationDto userRegistrationDto() {
		return new UserRegistrationDto();
	}

	/**
	 * Will be calld on GET requests
	 *
	 * @param model Current Model. It will be used on page frontend to show content from site backend
	 * @return String name of .html page to load
	 */
	@GetMapping
	public String showRegistrationForm(Model model) {
		model.addAttribute("title", "Dimasos University - Sign out");
		model.addAttribute("facultys", facultyRepository.findAll());

		return "registration";
	}

	/**
	 * Will be calld on POST requests. Register new user accaunt or throw error if data is incorrect
	 *
	 * @param model   Current Model. It will be used on page frontend to show content from site backend
	 * @param userDto Filled form model from page
	 * @return String name of .html page to load
	 */
	@PostMapping
	public String registerUserAccount(Model model, @ModelAttribute("user") @Valid UserRegistrationDto userDto,
									  BindingResult result) {
		model.addAttribute("facultys", facultyRepository.findAll());

		User existing = userService.findByEmail(userDto.getEmail());
		if (existing != null) {
			result.rejectValue("email", "", "Account with this e-mail already registered");
		}

		if (facultyRepository.findById(userDto.getFaculty()) == null) {
			result.rejectValue("faculty", "", "Incorrectly filled field");
		}

		if (result.hasErrors()) {
			return "registration";
		}

		userService.save(userDto);
		return "redirect:/registration?success";
	}

}
